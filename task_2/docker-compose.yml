version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: microservices-db
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api-service:
    build:
      context: ./api-service
      dockerfile: Dockerfile
    container_name: microservices-api
    environment:
      - PORT=3000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=microservices_db
      - DB_USER=postgres
      - DB_PASSWORD=password
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Service
  worker-service:
    build:
      context: ./worker-service
      dockerfile: Dockerfile
    container_name: microservices-worker
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=microservices_db
      - DB_USER=postgres
      - DB_PASSWORD=password
    networks:
      - microservices-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped

  # Frontend Service
  frontend-service:
    build:
      context: ./frontend-service
      dockerfile: Dockerfile
    container_name: microservices-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:3000
    ports:
      - "8080:8080"
    networks:
      - microservices-network
    depends_on:
      api-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data: