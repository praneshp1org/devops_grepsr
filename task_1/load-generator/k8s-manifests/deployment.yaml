apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  namespace: proxy-monitoring
  labels:
    app: load-generator
    version: v1.0.0
    component: synthetic-traffic
spec:
  replicas: 3
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
        version: v1.0.0
        component: synthetic-traffic
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: load-generator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: load-generator
        image: load-generator:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PROMETHEUS_MULTIPROC_DIR
          value: "/tmp"
        - name: CONFIG_PATH
          value: "/app/config/config.yaml"
        - name: METRICS_PORT
          value: "8080"
        - name: TRAFFIC_PATTERNS
          valueFrom:
            configMapKeyRef:
              name: load-generator-config
              key: traffic-patterns
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
      volumes:
      - name: config-volume
        configMap:
          name: load-generator-config
          defaultMode: 0644
      - name: tmp-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - load-generator
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: load-generator
  namespace: proxy-monitoring
  labels:
    app: load-generator
automountServiceAccountToken: true
---
apiVersion: v1
kind: Service
metadata:
  name: load-generator
  namespace: proxy-monitoring
  labels:
    app: load-generator
    service: load-generator
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app: load-generator
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: load-generator-hpa
  namespace: proxy-monitoring
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: load-generator
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: load-generator-pdb
  namespace: proxy-monitoring
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: load-generator
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: load-generator-network-policy
  namespace: proxy-monitoring
spec:
  podSelector:
    matchLabels:
      app: load-generator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow metrics scraping from Prometheus
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8080
  # Allow health checks from within namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: proxy-monitoring
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS to proxy vendors and test targets
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow HTTP to test targets
  - to: []
    ports:
    - protocol: TCP
      port: 80